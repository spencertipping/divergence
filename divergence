#!/usr/bin/perl

=head1 Self-modifying Perl script

=head2 Original implementation by Spencer Tipping L<http://spencertipping.com>

The prototype for this script is licensed under the terms of the MIT source code license.
However, this script in particular may be under different licensing terms. To find out how
this script is licensed, please contact whoever sent it to you. Alternatively, you may
run it with the 'license' argument if they have specified a license that way.

You should not edit this file directly. For information about how it was constructed, go
to L<http://spencertipping.com/#section=self-modifying-perl>. For quick usage guidelines, run
this script with the 'usage' argument.
=cut

$|++;

my %data;
my %transient;
my %externalized_functions;
my %datatypes;

my %locations;          # Maps eval-numbers to attribute names

sub meta::define_form {
  my ($namespace, $delegate) = @_;
  $datatypes{$namespace} = $delegate;
  *{"meta::${namespace}::implementation"} = $delegate;
  *{"meta::$namespace"} = sub {
    my ($name, $value) = @_;
    chomp $value;
    $data{"${namespace}::$name"} = $value;
    $delegate->($name, $value);
  };
}

sub meta::eval_in {
  my ($what, $where) = @_;

  # Obtain next eval-number and alias it to the designated location
  @locations{eval('__FILE__') =~ /\(eval (\d+)\)/} = ($where);

  my $result = eval $what;
  $@ =~ s/\(eval \d+\)/$where/ if $@;
  warn $@ if $@;
  $result;
}

meta::define_form 'meta', sub {
  my ($name, $value) = @_;
  meta::eval_in($value, "meta::$name");
};

meta::meta('configure', <<'__25976e07665878d3fae18f050160343f');
# A function to configure transients. Transients can be used to store any number of
# different things, but one of the more common usages is type descriptors.

sub meta::configure {
  my ($datatype, %options) = @_;
  $transient{$_}{$datatype} = $options{$_} for keys %options;
}
__25976e07665878d3fae18f050160343f

meta::meta('externalize', <<'__9141b4e8752515391385516ae94b23b5');
# Function externalization. Data types should call this method when defining a function
# that has an external interface.

sub meta::externalize {
  my ($name, $attribute, $implementation) = @_;
  $externalized_functions{$name} = $attribute;
  *{"::$name"} = $implementation || $attribute;
}
__9141b4e8752515391385516ae94b23b5

meta::meta('externalize_template', <<'__1e90e7ccb5fea1d498bbaaa6e7e43851');
sub meta::externalize_template {
  my ($name, $implementation) = @_;
  meta::externalize "template::$name", "template::$name", $implementation;
}
__1e90e7ccb5fea1d498bbaaa6e7e43851

meta::meta('functor::code-templates', <<'__d7c4de4adf3c7606453a118f75e73fd1');
package code;

# Templates for generating named source files.
sub template {
  my ($name, $implementation) = @_;
  $implementation ||= sub {
    my ($line, $block) = @_;
    my $append         = $line =~ s/^\h*>>\h*//o;

    $line =~ s/\s+.*$//o;
    file::write(&{'::source-directory'}() . "/$line", ($append && "\n") . $block, mkpath => 1, append => $append);
    "\\lstset{caption=$line}\\begin{${name}code}\n$block \\end{${name}code}";
  };

  meta::externalize_template $name, $implementation;
}
__d7c4de4adf3c7606453a118f75e73fd1

meta::meta('functor::editable', <<'__e97984f7c34d9f06173be574e28c3f91');
# An editable type. This creates a type whose default action is to open an editor
# on whichever value is mentioned. This can be changed using different flags.

sub meta::functor::editable {
  my ($typename, %options) = @_;

  meta::configure $typename, %options;
  meta::define_form $typename, sub {
    my ($name, $value) = @_;

    $options{on_bind} && &{$options{on_bind}}($name, $value);

    meta::externalize $options{prefix} . $name, "${typename}::$name", sub {
      my $attribute             = "${typename}::$name";
      my ($command, @new_value) = @_;

      return edit($attribute)                                                              if $command eq 'edit'                      or $options{default} eq 'edit'   and not defined $command;
      return associate($attribute, @new_value ? join(' ', @new_value) : join('', <STDIN>)) if $command eq '=' or $command eq 'import' or $options{default} eq 'import' and not defined $command;
      return preprocess(retrieve($attribute))                                              if $command eq 'compile'                   or $options{preprocess}          and not defined $command;
      return retrieve($attribute);
    };
  };
}
__e97984f7c34d9f06173be574e28c3f91

meta::meta('functor::tex-templates', <<'__34a5da8558897a4388fc22ed4b0c3c6b');
package tex;

# A wrapper for TeX templates. The idea is always the same, so I'm abstracting out the
# common externalization logic here.
sub template_for(&) {
  my ($implementation) = @_;
  sub {
    my %names = @_;
    for my $name (keys %names) {
      ::meta::externalize_template $name, sub {
        &$implementation($names{$name}, @_);
      };
    }
  };
}

sub id {
  map {$_ => $_} @_;
}

# Creates a one-line or multiline template based on normal TeX syntax. It's a straight
# transfer into TeX with no preprocessing.
*template = template_for {
  my ($name, $line, $block) = @_;
  $block ? "\\begin{$name}\n$block\n\\end{$name}" : "\\$name\{$line\}";
};

# Creates a labeled one-line template. This is just like normal TeX, but assumes the
# specification of a label name after a pipe character.
*labeled_template = template_for {
  my ($name, $line, undef) = @_;
  my ($real_stuff, $label) = split /\h*\|\h*/, $line;
  "\\$name\{$real_stuff\}" . ($label && "\\label{$label}");
};
__34a5da8558897a4388fc22ed4b0c3c6b

meta::meta('internal::runtime', <<'__0172b18c9b9311477d2f6b8c16bb44c2');
meta::configure 'internal', extension => '.pl', inherit => 1;
meta::define_form 'internal', \&meta::meta::implementation;
__0172b18c9b9311477d2f6b8c16bb44c2

meta::meta('template::code', 'code::template $_ for qw/java cpp asm javascript html resource/;');
meta::meta('template::document', 'tex::template(tex::id(qw/document tableofcontents maketitle title author date abstract documentclass verbatim/));');
meta::meta('template::math', "tex::template align => 'align*', nalign => 'align';");
meta::meta('template::sections', <<'__0bf14cbc6a0e77d9b82dd185d8d8a9a0');
tex::labeled_template(s1 => 'section', s2 => 'subsection', s3 => 'subsubsection', s4 => 'paragraph', s5 => 'subparagraph');
tex::labeled_template(sc => 'chapter', sp => 'part');
__0bf14cbc6a0e77d9b82dd185d8d8a9a0

meta::meta('type::bootstrap', <<'__297d03fb32df03b46ea418469fc4e49e');
# Bootstrap attributes don't get executed. The reason for this is that because
# they are serialized directly into the header of the file (and later duplicated
# as regular data attributes), they will have already been executed when the
# file is loaded.

meta::configure 'bootstrap', extension => '.pl', inherit => 1;
meta::define_form 'bootstrap', sub {};
__297d03fb32df03b46ea418469fc4e49e

meta::meta('type::data', "meta::functor::editable 'data', extension => '', inherit => 0, default => 'cat';");
meta::meta('type::function', <<'__d93b3cc15693707dac518e3d6b1f5648');
meta::configure 'function', extension => '.pl', inherit => 1;
meta::define_form 'function', sub {
  my ($name, $value) = @_;
  meta::externalize $name, "function::$name", meta::eval_in("sub {\n$value\n}", "function::$name");
};
__d93b3cc15693707dac518e3d6b1f5648

meta::meta('type::internal_function', <<'__34abb44c67c7e282569e28ef6f4d62ab');
meta::configure 'internal_function', extension => '.pl', inherit => 1;
meta::define_form 'internal_function', sub {
  my ($name, $value) = @_;
  *{$name} = meta::eval_in("sub {\n$value\n}", "internal_function::$name");
};
__34abb44c67c7e282569e28ef6f4d62ab

meta::meta('type::library', <<'__a9c0193f297bbc96a78eb5e27727fd30');
meta::configure 'library', extension => '.pl', inherit => 1;
meta::define_form 'library', sub {
  my ($name, $value) = @_;
  meta::eval_in($value, "library::$name");
  meta::externalize $name, "library::$name", sub {
    edit("library::$name");
  };
};
__a9c0193f297bbc96a78eb5e27727fd30

meta::meta('type::message_color', <<'__794bf137c425293738f07636bcfb5c55');
meta::configure 'message_color', extension => '', inherit => 1;
meta::define_form 'message_color', sub {
  my ($name, $value) = @_;
  terminal::color($name, $value);
};
__794bf137c425293738f07636bcfb5c55

meta::meta('type::meta', <<'__640f25635ce2365b0648962918cf9932');
# This doesn't define a new type. It customizes the existing 'meta' type
# defined in bootstrap::initialization. Note that horrible things will
# happen if you redefine it using the editable functor.

meta::configure 'meta', extension => '.pl', inherit => 1;
__640f25635ce2365b0648962918cf9932

meta::meta('type::note', "meta::functor::editable 'note', extension => '', inherit => 0, default => 'edit';");
meta::meta('type::resource', "meta::functor::editable 'resource', extension => '.cltex', inherit => 1, default => 'edit';");
meta::meta('type::section', "meta::functor::editable 'section', extension => '.cltex', inherit => 0, default => 'edit';");
meta::meta('type::state', <<'__c1f29670be26f1df6100ffe4334e1202');
# Allows temporary or long-term storage of states. Nothing particularly insightful
# is done about compression, so storing alternative states will cause a large
# increase in size. Also, states don't contain other states -- otherwise the size
# increase would be exponential.

# States are created with the save-state function.

meta::configure 'state', inherit => 0, extension => '.pl';
meta::define_form 'state', \&meta::bootstrap::implementation;
__c1f29670be26f1df6100ffe4334e1202

meta::meta('type::template', <<'__25f4d6eafb1d3eea6d5d3d9a71a5623e');
meta::configure 'template', extension => '.pl', inherit => 1;
meta::define_form 'template', sub {
  my ($name, $value) = @_;
  meta::externalize "template::$name", "template::$name", meta::eval_in("sub {\n$value\n}", "template::$name");
};
__25f4d6eafb1d3eea6d5d3d9a71a5623e

meta::meta('type::vim_highlighter', "meta::functor::editable 'vim_highlighter', extension => '.vim', inherit => 1, default => 'edit';");
meta::meta('type::watch', "meta::functor::editable 'watch', prefix => 'watch::', inherit => 1, extension => '.pl', default => 'cat';");
meta::bootstrap('initialization', <<'__baa43e5e8e6e1cd76d4e2de828ceaa4d');
#!/usr/bin/perl

=head1 Self-modifying Perl script

=head2 Original implementation by Spencer Tipping L<http://spencertipping.com>

The prototype for this script is licensed under the terms of the MIT source code license.
However, this script in particular may be under different licensing terms. To find out how
this script is licensed, please contact whoever sent it to you. Alternatively, you may
run it with the 'license' argument if they have specified a license that way.

You should not edit this file directly. For information about how it was constructed, go
to L<http://spencertipping.com/#section=self-modifying-perl>. For quick usage guidelines, run
this script with the 'usage' argument.
=cut

$|++;

my %data;
my %transient;
my %externalized_functions;
my %datatypes;

my %locations;          # Maps eval-numbers to attribute names

sub meta::define_form {
  my ($namespace, $delegate) = @_;
  $datatypes{$namespace} = $delegate;
  *{"meta::${namespace}::implementation"} = $delegate;
  *{"meta::$namespace"} = sub {
    my ($name, $value) = @_;
    chomp $value;
    $data{"${namespace}::$name"} = $value;
    $delegate->($name, $value);
  };
}

sub meta::eval_in {
  my ($what, $where) = @_;

  # Obtain next eval-number and alias it to the designated location
  @locations{eval('__FILE__') =~ /\(eval (\d+)\)/} = ($where);

  my $result = eval $what;
  $@ =~ s/\(eval \d+\)/$where/ if $@;
  warn $@ if $@;
  $result;
}

meta::define_form 'meta', sub {
  my ($name, $value) = @_;
  meta::eval_in($value, "meta::$name");
};

__baa43e5e8e6e1cd76d4e2de828ceaa4d

meta::data('default-action', 'shell');
meta::data('license', <<'__3c6177256de0fddb721f534c3ad8c0ee');
MIT License
Copyright (c) 2010 Spencer Tipping

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
__3c6177256de0fddb721f534c3ad8c0ee

meta::data('name', 'divergence');
meta::data('output-dir', '/tmp');
meta::data('pdf-output-file', '/tmp/divergence.9e2b37f74c4f40f02dfc172889a0a2b8/document.pdf');
meta::data('pdf-reader', '/usr/bin/evince');
meta::data('pdftex-command', 'pdflatex -output-directory=__TEMPORARY_DIRECTORY__ __INPUT_FILE__');
meta::data('quiet', '1');
meta::data('source-directory', '/tmp/src');
meta::data('table-of-contents', '1');
meta::data('tex-command', 'latex -output-directory=__TEMPORARY_DIRECTORY__ __INPUT_FILE__');
meta::data('watching', '0');
meta::function('cat', <<'__c8e76a0cf10e2061e9cf9e1643922c3e');
my ($name) = @_;
$data{$name};
__c8e76a0cf10e2061e9cf9e1643922c3e

meta::function('clean', <<'__1269c1a312062a1598dcde16eb6134e2');
my $output_directory = &{'pdf-output-file'}();
$output_directory =~ s+/.*++g;
unlink <$output_directory/*>;
rmdir $output_directory;
__1269c1a312062a1598dcde16eb6134e2

meta::function('clone', <<'__fec8cf43b197da97cfd5e49d75891d57');
for (@_) {
  if ($_) {
    eval {
      file::write($_, serialize(), noclobber => 1);
      chmod(0700, $_);
      print "File $_ cloned successfully.\n";
    };

    print "$@\n" if $@;
  }
}
__fec8cf43b197da97cfd5e49d75891d57

meta::function('compile', <<'__8de64ff7f4823d92f3258e211608d9bb');
my $tex_command         = &{'tex-command'}();
my $pdftex_command      = &{'pdftex-command'}();
my $filename            = 'document';

my $contents            = tex();
my $output_directory    = &{'output-dir'}();
chomp $output_directory;

my $temporary_directory = state_based_filename();
$temporary_directory =~ s+^.*/++;
$temporary_directory = "$output_directory/$temporary_directory";

$tex_command    =~ s/__TEMPORARY_DIRECTORY__/$temporary_directory/g;
$tex_command    =~ s+__INPUT_FILE__+$temporary_directory/$filename.tex+g;

$pdftex_command =~ s/__TEMPORARY_DIRECTORY__/$temporary_directory/g;
$pdftex_command =~ s+__INPUT_FILE__+$temporary_directory/$filename.tex+g;

mkdir $temporary_directory;
file::write("$temporary_directory/$filename.tex", $contents);

my $result = &{'table-of-contents'}() ? system($tex_command) || system($tex_command) || system($pdftex_command) : system($pdftex_command);

associate('data::pdf-output-file', "$temporary_directory/$filename.pdf", execute => 1);
$result;
__8de64ff7f4823d92f3258e211608d9bb

meta::function('cp', <<'__d33fe9aa270eeee6dcc3ee445447a6a7');
my ($from, $to) = @_;
my $exists = exists $data{$from};
associate($to, retrieve($from)) if $exists;
die "No such attribute $from" unless $exists;
retrieve($from);
__d33fe9aa270eeee6dcc3ee445447a6a7

meta::function('create', <<'__97e5444422f5f6087371f59ddc3e1b8c');
my ($name, $value) = @_;

return edit($name) if exists $data{$name};

if (defined $value) {
  associate($name, $value);
} else {
  associate($name, '');
  edit($name);
}
__97e5444422f5f6087371f59ddc3e1b8c

meta::function('current-state', <<'__0d932bd14547669ffbc86fde3ae9d050');
my @valid_keys   = grep ! /^internal::runtime$/ && ! /^state::/, sort keys %data;
my @ordered_keys = (grep(/^meta::/, @valid_keys), grep(! /^meta::/, @valid_keys));
join "\n", map serialize_single($_), @ordered_keys;
__0d932bd14547669ffbc86fde3ae9d050

meta::function('edit', <<'__6912fb43aad413e79cbf45e134866b6e');
my ($name, %options) = @_;
my $extension = $transient{extension}{namespace($name)} || '';

die "Attribute $name does not exist." unless exists $data{$name};
associate($name, invoke_editor_on($data{$name} || "# Attribute $name", %options, attribute => $name, extension => $extension),
          execute => $name !~ /^internal::/ && $name !~ /^bootstrap::/);
save();
__6912fb43aad413e79cbf45e134866b6e

meta::function('exists', <<'__3c6aa32026f04564ec4861c77a8e6465');
my $name = shift;
grep {$_ eq $name} keys %data;
__3c6aa32026f04564ec4861c77a8e6465

meta::function('export', <<'__6c445eea603f9863df0f8db445fd708e');
# Exports data into a text file.
#   export attr1 attr2 attr3 ... file.txt

my $name = pop @_;
my @attributes = @_;

if (@attributes) {
  my $file = join "\n", map cat($_), @attributes;
  file::write($name, $file);
} else {
  die 'Not enough arguments';
}
__6c445eea603f9863df0f8db445fd708e

meta::function('hash', <<'__7c4145cf6e97dfb9ab04a613866751d3');
my ($data) = @_;
fast_hash($data);
__7c4145cf6e97dfb9ab04a613866751d3

meta::function('import', <<'__84d29edfe7ad2119465fdcf7d037ed1c');
my $name  = pop @_;
my @files = @_;

if (@files) {
  my $files = join "", map {file::read ($_)} @files;
  associate ($name, $files); 
}
else {
  associate($name, join('', <STDIN>));
}
__84d29edfe7ad2119465fdcf7d037ed1c

meta::function('import-bundle', <<'__4c7139ed5c9f65f38a33cf8f8a6cae27');
eval join '', <STDIN>;
die $@ if $@;
__4c7139ed5c9f65f38a33cf8f8a6cae27

meta::function('load-state', <<'__878f141333993ead4d272027ad301eee');
my ($state_name) = @_;
my $state = retrieve("state::$state_name");

terminal::message('state', 'Saving current state into _...');
&{'save-state'}('_');

terminal::message('state', 'Removing attributes from %data and unexternalizing functions...');
delete $data{$_} for grep ! /^state::/ && ! /^internal::runtime$/, keys %data;
%externalized_functions = ();

terminal::message('state', "Restoring state $state_name...");
eval($state);
terminal::message('error', $@) if $@;
reload();
verify();
__878f141333993ead4d272027ad301eee

meta::function('lock', <<'__d94992bf224487f5bfd439eb822db309');
my (undef, undef, $mode) = stat $0;
chmod $mode & 0555, $0;
__d94992bf224487f5bfd439eb822db309

meta::function('ls', <<'__b9d8eab31beedc7e20616be1a37a3c96');
my $criteria   = join('|', @_) || '.';
my @external   = grep /$criteria/, sort keys %externalized_functions;
my @defined_by = map $externalized_functions{$_}, @external;
my @shadows    = grep ! defined $data{$externalized_functions{$_}}, @external;

table_display([@external, @shadows], [@defined_by, map('< shadow >', @shadows)]);
__b9d8eab31beedc7e20616be1a37a3c96

meta::function('ls-a', <<'__15542def52b2c692c8fdb90278493dc2');
my $criteria   = join('|', @_) || '.';
my @attributes = grep(/$criteria/, sort keys %data);
my %inverses   = map {$externalized_functions{$_} => $_} keys %externalized_functions;

table_display([@attributes], [map $inverses{$_}, @attributes], [map sprintf('%6d', length(serialize_single($_))), @attributes],
                                                               [map sprintf('%6d', length(retrieve($_))),         @attributes]);
__15542def52b2c692c8fdb90278493dc2

meta::function('make', <<'__9a3d7e3c7e0017f4c9b239f3858aaf03');
compile() || view();
clean();
__9a3d7e3c7e0017f4c9b239f3858aaf03

meta::function('mv', <<'__09f350db8406303ade06d229477d79ad');
my ($from, $to) = @_;
my $destination_namespace = namespace($to);

die "'$from' does not exist" unless exists $data{$from};
die "The namepsace '$destination_namespace' does not exist" unless $datatypes{$destination_namespace};

associate($to, retrieve($from));
rm($from);
__09f350db8406303ade06d229477d79ad

meta::function('note', <<'__bcbfeac6dd2112f47296265444570a6e');
# Creates a note with a given name, useful for jotting things down.
create("note::$_[0]");
__bcbfeac6dd2112f47296265444570a6e

meta::function('perl', <<'__d8818fd77e9e7ce68811e0947dfcc206');
my $result = eval($_[0]);
$@ ? $@ : $result;
__d8818fd77e9e7ce68811e0947dfcc206

meta::function('pop-state', <<'__90a6d3599a269ca0bef8126df7aba8e0');
%data = %{pop @{$transient{'states'}}} if @{$transient{'states'}};
reload();
__90a6d3599a269ca0bef8126df7aba8e0

meta::function('preprocess', <<'__66e539d29e9afa903569efad0eb7c886');
# Implements a simple preprocessing language.
# Syntax follows two forms. One is the 'line form', which gives you a way to specify arguments inline
# but not spanning multiple lines. The other is 'block form', which gives you access to both one-line
# arguments and a block of lines. The line parameters are passed in verbatim, and the block is
# indentation-adjusted and then passed in as a second parameter. (Indentation is adjusted to align
# with the name of the command.)
#
# Here are the forms:
#
# - line arguments to function
#
# - block line arguments << eof
#   block contents
#   block contents
#   ...
# - eof

my ($string, %options) = @_;
my $expansions         = 0;
my $old_string         = '';
my $limit              = $options{expansion_limit} || 100;
my @pieces             = ();

sub adjust_spaces {
  my ($spaces, $string) = @_;
  $string =~ s/^$spaces  //mg;
  chomp $string;
  $string;
}

while ($old_string ne $string and $expansions++ < $limit) {
  $old_string = $string;

  while ((my @pieces = split  /(^(\h*)-\h \S+ \h* \V* <<\h*(\w+)$ \n .*?  ^\2-\h\3$)/xms, $string) > 1 and $expansions++ < $limit) {
    $pieces[1 + ($_ << 2)] =~ /^ (\h*)-\h(\S+)\h*(\V*)<<\h*(\w+)$ \n(.*?) ^\1-\h\4 $/xms && $externalized_functions{"template::$2"} and
      $pieces[1 + ($_ << 2)] = &{"template::$2"}($3, adjust_spaces($1, $5))
      for 0 .. $#pieces / 4;

    @pieces[2 + ($_ << 2), 3 + ($_ << 2)] = '' for 0 .. $#pieces / 4;
    $string = join '', @pieces;
  }

  if ((my @pieces = split     /^(\h*-\h \S+ \h* .*)$/xom, $string) > 1) {
    $pieces[1 + ($_ << 1)] =~ /^ \h*-\h(\S+)\h*(.*)$/xom && $externalized_functions{"template::$1"} and
      $pieces[1 + ($_ << 1)] = &{"template::$1"}($2)
      for 0 .. $#pieces >> 1;

    $string = join '', @pieces;
  }
}

$string;
__66e539d29e9afa903569efad0eb7c886

meta::function('push-state', <<'__ba601ddf7dce874ce79dd37a936ffdcc');
push @{$transient{'states'} = $transient{'states'} || []}, {%data};
my $state_count = scalar @{$transient{'states'}};
"There are now $state_count states on the stack.";
__ba601ddf7dce874ce79dd37a936ffdcc

meta::function('reload', 'execute($_) for grep ! (/^internal::/ || /^bootstrap::/), keys %data;');
meta::function('render', <<'__ccb26db43115329651cc3c0527a3e849');
use File::Copy 'copy';
compile();
copy(&{'pdf-output-file'}(), &{'source-directory'}() . '/' . name() . '.pdf') or die "Copy failed: $!";
__ccb26db43115329651cc3c0527a3e849

meta::function('rm', <<'__963fdd3d9f6a0ba279b001b1f5679a38');
for my $to_be_deleted (@_) {
  terminal::message('warning', "$to_be_deleted does not exist") unless exists $data{$to_be_deleted};
}

delete @data{@_};
__963fdd3d9f6a0ba279b001b1f5679a38

meta::function('save', <<'__ca9ab587c78ff2024ef9ad8ca634db5b');
if (! verify()) {
  die "$0 has not been updated";
} else {
  my $serialized_data = serialize();
  eval {file::write($0, $serialized_data)};
  die $@ if $@;
  terminal::message('info', "$0 saved successfully.");
}
__ca9ab587c78ff2024ef9ad8ca634db5b

meta::function('save-state', <<'__5c5b586331e25951140ced6442d9fe2b');
# Creates a named copy of the current state and stores it.
my ($state_name) = @_;
associate("state::$state_name", &{'current-state'}(), execute => 1);
__5c5b586331e25951140ced6442d9fe2b

meta::function('serialize', <<'__d7b3affaece3a36d5cfc051b88a5b76e');
my $criteria               = join '|', @_;

my @matching_keys          = grep length && (! $criteria || m/$criteria/), sort keys %data;
my @keys_without_internals = grep ! /^internal::/, @matching_keys;

my @matching_attributes    = map serialize_single($_), grep(/^meta::/,     @keys_without_internals),
                                                       grep(! /^meta::/,   @keys_without_internals),
                                                       grep(/^internal::/, @matching_keys);

my @final_array            = $criteria ? @matching_attributes : (retrieve('bootstrap::initialization'), @matching_attributes, '__END__');

terminal::message('info', "No attributes matched $criteria") unless @final_array;
join "\n", @final_array;
__d7b3affaece3a36d5cfc051b88a5b76e

meta::function('serialize_single', <<'__91663f820a05ff4029a200fbfd7285bc');
# Serializes a single attribute and optimizes for content.

my $name               = $_[0] || $_;
my $contents           = $data{$name};
my $meta_function_name = 'meta::' . namespace($name);
my $invocation_name    = basename($name);

return "$meta_function_name('$invocation_name', '$contents');"   if $contents =~ /^[^\n']*$/;
return "$meta_function_name('$invocation_name', \"$contents\");" if $contents =~ /^[^\n"\\\$@%&]*$/;

my $delimiter = '__' . fast_hash($contents);
return "$meta_function_name('$invocation_name', <<'$delimiter');\n$contents\n$delimiter\n";
__91663f820a05ff4029a200fbfd7285bc

meta::function('shell', <<'__c6ef6c31734c0b330f6076543fef8f1f');
use Term::ReadLine;

my $term = new Term::ReadLine "$0 shell";
$term->ornaments(0);
my $prompt = name() . '$ ';
my $output = $term->OUT || \*STDOUT;

$term->Attribs->{attempted_completion_function} = \&complete;

while (defined ($_ = $term->readline($prompt))) {
  my $command_line = $_;
  my @args = grep length, split /\s+|("[^"\\]*(?:\\.)?")/o;
  my $function_name = shift @args;

  return if $function_name eq 'exit';

  s/^"(.*)"$/\1/o, s/\\\\"/"/go for @args;

  if ($function_name) {
    if ($externalized_functions{$function_name}) {
      chomp(my $result = eval {&$function_name(@args)});
      terminal::message('error', translate_backtrace($@)) if $@;
      print $output $result, "\n" unless $@;
    } else {
      terminal::message('warning', "Command not found: '$function_name' (use 'ls' to see available commands)");
    }
  }

  if (watching()) {
    for (grep /^watch::/, sort keys %data) {
      my $watch = retrieve($_);
      terminal::message('watch', "$_ => " . meta::eval_in($watch, $_));
    }
  }

  $prompt = name() . '$ ';
}
__c6ef6c31734c0b330f6076543fef8f1f

meta::function('size', 'length(serialize());');
meta::function('snapshot', <<'__ccb6335f4837338be1d73ccc5f81973d');
my ($name) = @_;
file::write(my $finalname = state_based_filename($name), serialize(), noclobber => 1);
chmod 0700, $finalname;

terminal::message('state', "Created snapshot at $finalname.");
__ccb6335f4837338be1d73ccc5f81973d

meta::function('state', <<'__e17520e3a5d81d788ae995fd8ac47cb9');
my @keys = sort keys %data;
my $hash = fast_hash(scalar @keys);
$hash = fast_hash($hash . join '|', @keys);
$hash = fast_hash("$data{$_}|$hash") for @keys;
$hash;
__e17520e3a5d81d788ae995fd8ac47cb9

meta::function('tex', <<'__5bb8bf491e1b442858096acf711135f9');
my ($document) = @_;
$document ||= 'main';
preprocess(retrieve("section::$document"));
__5bb8bf491e1b442858096acf711135f9

meta::function('unlock', <<'__b1bdb7eb224487f5bfd439ebb997c823');
my (undef, undef, $mode) = stat $0;
chmod $mode | 0200, $0;
__b1bdb7eb224487f5bfd439ebb997c823

meta::function('update-from', <<'__0b818ed9847d1238b8eaaea8e8c4e581');
# Upgrade all attributes that aren't customized. Customization is defined when the data type is created,
# and we determine it here by checking for $transients{inherit}{$type}.

my $target  = $_[0] or die 'Must specify another script to pull data from.';
my @options = grep /^-/, @_;

&{'save-state'}('before-update');

terminal::message('info', 'Updating meta attributes...');
eval qx($target serialize '^meta::');
terminal::message('warning', $@) if $@;
terminal::message('warning', 'One of the meta-attributes triggered a verification failure.') unless verify();

terminal::message('info', 'Updating non-meta attributes...');
my $combined_pattern = join '|', map "^${_}::", grep ! (/^meta$/ || /^internal$/) && $transient{inherit}{$_}, sort keys %{$transient{inherit}};
eval qx($target serialize '$combined_pattern');
terminal::message('warning', $@) if $@;
reload();

if (verify()) {
  terminal::message('info', "Successfully updated from $_[0]. Run 'load-state before-update' to undo this change.");
} elsif (grep /^--force$/o || /^-f$/o, @options) {
  terminal::message('warning', 'The object failed verification, but the failure state has been kept because --force was specified.');
  terminal::message('warning', 'At this point your object will not save properly, though backup copies will be created.');
  terminal::message('info',    'Run "load-state before-update" to undo the update and return to a working state.');
} else {
  terminal::message('error', 'Verification failed after the upgrade was complete.');
  terminal::message('info',  "$0 has been reverted to its pre-upgrade state.");
  terminal::message('info',  "If you want to upgrade and keep the failure state, then run 'update-from $target --force'.");
  &{'load-state'}('before-update');
}
__0b818ed9847d1238b8eaaea8e8c4e581

meta::function('usage', <<'__234b1da5bb4e34d72a932ab68aad5052');
<<"EOD" . ls ();
Usage: $0 action [arguments]
Defined actions (and the attribute that defines them):
EOD
__234b1da5bb4e34d72a932ab68aad5052

meta::function('verify', <<'__e8ff828f42cdc7d759b70bb81721ddb6');
my $serialized_data = serialize();
my $state           = state();

my $temporary_filename = temporary_name();
$transient{temporary_filename} = $temporary_filename;
file::write($temporary_filename, $serialized_data);
chmod 0700, $temporary_filename;

chomp(my $observed_state = join '', qx|perl '$temporary_filename' state|);

my $result = $observed_state eq $state;
unlink $temporary_filename if $result;
terminal::message('error', "Verification failed; '$observed_state' (produced by $temporary_filename) != '$state' (expected)") unless $result;

$result;
__e8ff828f42cdc7d759b70bb81721ddb6

meta::function('view', <<'__72064117780244bd9dd38659573b9f2c');
my $pdf_reader      = &{'pdf-reader'}();
my $pdf_output_file = &{'pdf-output-file'}();
chomp $pdf_reader;
system("$pdf_reader '$pdf_output_file'");
__72064117780244bd9dd38659573b9f2c

meta::function('vim', <<'__bd231af998c353790253bc6660be0b90');
# Installs VIM highlighters.
file::write("$ENV{'HOME'}/.vim/syntax/$_.vim", retrieve("vim_highlighter::$_")) for grep s/^vim_highlighter:://o, keys %data;
__bd231af998c353790253bc6660be0b90

meta::internal_function('associate', <<'__80f0728190bf3b0d4c94807cfdc12a22');
my ($name, $value, %options) = @_;
my $namespace = namespace($name);
die "Namespace $namespace does not exist" unless $datatypes{$namespace};
$data{$name} = $value;
execute($name) if $options{'execute'};
__80f0728190bf3b0d4c94807cfdc12a22

meta::internal_function('basename', <<'__62efb9f22157835940af1d5feae98d98');
my ($name) = @_;
$name =~ s/^[^:]*:://;
$name;
__62efb9f22157835940af1d5feae98d98

meta::internal_function('complete', <<'__f14ae2337c0653b6bb6fd02bb6493646');
my @functions  = sort keys %externalized_functions;
my @attributes = sort keys %data;

sub match {
  my ($text, @options) = @_;
  my @matches = sort grep /^$text/, @options;

  if    (@matches == 0) {return undef;}
  elsif (@matches == 1) {return $matches [0];}
  elsif (@matches >  1) {return ((longest ($matches [0], $matches [@matches - 1])), @matches);}
}

sub longest {
  my ($s1, $s2) = @_; 
  return substr ($s1, 0, length $1) if ($s1 ^ $s2) =~ /^(\0*)/;
  return ''; 
}

# This is another way to implement autocompletion.
#
# my $attribs = $term->Attribs;
# $attribs->{completion_entry_function} = $attribs->{list_completion_function};
# $attribs->{completion_word} = [sort keys %data, sort keys %externalized_functions];

my ($text, $line) = @_;
if ($line =~ / /) {
  # Start matching attribute names.
  match ($text, @attributes);
} else {
  # Start of line, so it's a function.
  match ($text, @functions);
}
__f14ae2337c0653b6bb6fd02bb6493646

meta::internal_function('debug_trace', <<'__f887289259890731458a66398b628cdc');
quiet() or terminal::message('debug', join ', ', @_);
wantarray ? @_ : $_[0];
__f887289259890731458a66398b628cdc

meta::internal_function('execute', <<'__2d5b6f18c13943d6a0de15e9c348d428');
my ($name, %options) = @_;
my $namespace = namespace($name);
eval {&{"meta::$namespace"}(basename($name), retrieve($name))};
warn $@ if $@ && $options{'carp'};
__2d5b6f18c13943d6a0de15e9c348d428

meta::internal_function('fast_hash', <<'__ac70f469e697725cfb87629833434ab1');
my ($data)     = @_;
my $piece_size = length($data) >> 3;

my @pieces     = (substr($data, $piece_size * 8) . length($data), map(substr($data, $piece_size * $_, $piece_size), 0 .. 7));
my @hashes     = (fnv_hash($pieces[0]));

push @hashes, fnv_hash($pieces[$_ + 1] . $hashes[$_]) for 0 .. 7;

$hashes[$_] ^= $hashes[$_ + 4] >> 16 | ($hashes[$_ + 4] & 0xffff) << 16 for 0 .. 3;
$hashes[0]  ^= $hashes[8];

sprintf '%08x' x 4, @hashes[0 .. 3];
__ac70f469e697725cfb87629833434ab1

meta::internal_function('file::read', <<'__186bbcef8f6f0dd8b72ba0fdeb1de040');
my $name = shift;
open my($handle), "<", $name;
my $result = join "", <$handle>;
close $handle;
$result;
__186bbcef8f6f0dd8b72ba0fdeb1de040

meta::internal_function('file::write', <<'__2bb0595e24631c2cace8ee5ec8194285');
use File::Path 'mkpath';
use File::Basename 'dirname';

my ($name, $contents, %options) = @_;
die "Choosing not to overwrite file $name" if $options{noclobber} && -f $name;
mkpath(dirname($name)) if $options{mkpath};

open my($handle), $options{append} ? '>>' : '>', $name or die "Can't open $name for writing";
print $handle $contents;
close $handle;
__2bb0595e24631c2cace8ee5ec8194285

meta::internal_function('fnv_hash', <<'__8d001a3a7988631bab21a41cee559758');
# A rough approximation to the Fowler-No Voll hash. It's been 32-bit vectorized
# for efficiency, which may compromise its effectiveness for short strings.

my ($data) = @_;

my ($fnv_prime, $fnv_offset) = (16777619, 2166136261);
my $hash                     = $fnv_offset;
my $modulus                  = 2 ** 32;

$hash = ($hash ^ ($_ & 0xffff) ^ ($_ >> 16)) * $fnv_prime % $modulus for unpack 'L*', $data . substr($data, -4) x 8;
$hash;
__8d001a3a7988631bab21a41cee559758

meta::internal_function('invoke_editor_on', <<'__7c798760d79429e5b52d9fa934e889d8');
my ($data, %options) = @_;
my $editor           = $options{editor} || $ENV{VISUAL} || $ENV{EDITOR} ||
                       die 'Either the $VISUAL or $EDITOR environment variable should be set to a valid editor';
my $options          = $options{options} || $ENV{VISUAL_OPTS} || $ENV{EDITOR_OPTS} || '';
my $extension        = $options{extension} || '';
my $attribute        = $options{attribute} || '';

my $filename         = temporary_name() . "-$attribute" . $extension;

file::write($filename, $data);
system("$editor $options '$filename'");

my $result = file::read($filename);
unlink $filename;
$result;
__7c798760d79429e5b52d9fa934e889d8

meta::internal_function('messages::error', <<'__5af9120535afe26fa6828f477abe833c');
my ($message) = @_;
terminal::message('error', $message);
die;
__5af9120535afe26fa6828f477abe833c

meta::internal_function('messages::warning', <<'__2877a0b67326120f9d43089368e6c4f3');
my ($message) = @_;
terminal::message('warning', $message);
__2877a0b67326120f9d43089368e6c4f3

meta::internal_function('namespace', <<'__93213d60cafb9627e0736b48cd1f0760');
my ($name) = @_;
$name =~ s/::.*$//;
$name;
__93213d60cafb9627e0736b48cd1f0760

meta::internal_function('retrieve', '@data{@_};');
meta::internal_function('state_based_filename', <<'__218815c285975367ae0324bf5c3f5409');
my ($name) = @_;
my $noise  = $name || state();
$noise =~ s/\//-/g;
"$0.$noise";
__218815c285975367ae0324bf5c3f5409

meta::internal_function('table_display', <<'__4ac28dc593ac17fd17b6573c07b43e4e');
# Displays an array of arrays as a table; that is, with alignment. Arrays are
# expected to be in column-major order.

sub maximum_length_in {
  my $maximum = 0;
  length > $maximum and $maximum = length for @_;
  $maximum;
}

my @arrays    = @_;
my @lengths   = map maximum_length_in(@$_), @arrays;
my @row_major = map {my $i = $_; [map $$_[$i], @arrays]} 0 .. $#{$arrays[0]};
my $format    = join '  ', map "%-${_}s", @lengths;

join "\n", map sprintf($format, @$_), @row_major;
__4ac28dc593ac17fd17b6573c07b43e4e

meta::internal_function('temporary_name', <<'__0fb1402061581b69822f913631b4a9d9');
use File::Temp 'tempfile';
my (undef, $temporary_filename) = tempfile("$0." . 'X' x 4, OPEN => 0);
$temporary_filename;
__0fb1402061581b69822f913631b4a9d9

meta::internal_function('translate_backtrace', <<'__06fad3d85833a6484e426401b95e0206');
my ($trace) = @_;
$trace =~ s/\(eval (\d+)\)/$locations{$1 - 1}/g;
$trace;
__06fad3d85833a6484e426401b95e0206

meta::library('terminal', <<'__6999988eaf441c9b1282e03e1db427b5');
# Functions for nice-looking terminal output.
package terminal;

my %color_conversions = (black  => "0;0", red  => "1;31", yellow => "1;33", green => "1;32",
                                          blue => "1;34", purple => "1;35", cyan  => "1;36");
my $longest_prefix = 0;
my %default_colors = ();

sub color {
  $default_colors{$_[0]} = $_[1];
  $longest_prefix = $longest_prefix < length($_[0]) ? length($_[0]) : $longest_prefix;
}

color    'info',  'green';
color  'status',  'green';
color   'error',    'red';
color   'debug',   'blue';
color 'warning', 'yellow';

sub message {
  my ($prefix, $message) = @_;
  my $color = $color_conversions{$default_colors{$prefix}};
  my $padding = ' ' x ($longest_prefix - length $prefix);

  return if ::quiet() and $default_colors{$prefix} eq 'green';
  print STDERR "${padding}\[\033[${color}m$prefix\033[0;0m] $message\n";
}
__6999988eaf441c9b1282e03e1db427b5

meta::message_color('state', 'purple');
meta::message_color('states', 'yellow');
meta::message_color('watch', 'blue');
meta::resource('header', <<'__efe6254be4f73fb4170ab1980a1888d5');
- include resource::header-packages
- include resource::header-listings

- include resource::header-refs

- include resource::header-languages
- include resource::header-resource
__efe6254be4f73fb4170ab1980a1888d5

meta::resource('header-languages', <<'__637a18cf607b727dec3feab552be05e2');
\lstnewenvironment{asmcode}       {}{}
\lstnewenvironment{cppcode}       {\lstset{language=c++}}{}
\lstnewenvironment{javacode}      {\lstset{language=java}}{}
\lstnewenvironment{javascriptcode}{}{}
\lstnewenvironment{htmlcode}      {\lstset{language=html}}{}
__637a18cf607b727dec3feab552be05e2

meta::resource('header-listings', <<'__747e2e3bc83de0d564ec96e91395fa84');
\definecolor{gray}{rgb}{0.6,0.6,0.6}

\usepackage{caption}
\DeclareCaptionFormat{listing}{\llap{\color{gray}#1\hspace{10pt}}\tt{}#3}
\captionsetup[lstlisting]{format=listing, singlelinecheck=false, margin=0pt, font={bf}}

\lstset{columns=fixed,basicstyle={\tt},numbers=left,basewidth=0.5em,showstringspaces=false,numberstyle={\color{gray}\scriptsize}}
__747e2e3bc83de0d564ec96e91395fa84

meta::resource('header-packages', <<'__f69baadb1d3ce11744003b174c91b34b');
\usepackage[utf8]{inputenc}
\usepackage{amsmath,amssymb,pxfonts,listings,color}
\usepackage[colorlinks]{hyperref}
__f69baadb1d3ce11744003b174c91b34b

meta::resource('header-refs', '\newcommand{\Ref}[2]{\hyperref[#2]{#1 \ref*{#2}}}');
meta::resource('header-resource', '\lstnewenvironment{resourcecode}{}{}');
meta::section('introduction', <<'__ea2e91bda0cea5bd0f6cccf8973d51f8');
- s1 Introduction | sec:introduction
  Divergence is a JavaScript library designed to generate and manipulate functions. It provides some low-level code optimization by enabling compact notation for routine things such as
  mapping, but it also provides a full JavaScript parser to decompile functions and implement systematic transformations. This can be useful when debugging, for example.
__ea2e91bda0cea5bd0f6cccf8973d51f8

meta::section('main', <<'__a61b22905685b4c5e0dcfe85cf37e7ef');
- documentclass article
- include resource::header

- title  Divergence
- author Spencer Tipping

- document << end
  - maketitle
  - tableofcontents
  
  - include section::introduction
- end
__a61b22905685b4c5e0dcfe85cf37e7ef

meta::template('eval', <<'__7be1d470a07a06c58e971bc7fc24c048');
my $result = eval $_[0];
terminal::message('warning', "Error during template evaluation: $@") if $@;
$result;
__7be1d470a07a06c58e971bc7fc24c048

meta::template('failing_conditional', <<'__b49f2ffe1cfefb36b1eabd7abd7b3bb6');
my ($commands)    = @_;
my $should_return = $commands =~ / if (.*)$/ && ! eval $1;
terminal::message('warning', "eval of template condition failed: $@") if $@;
$should_return;
__b49f2ffe1cfefb36b1eabd7abd7b3bb6

meta::template('include', <<'__e0624844a65ae41e0217dd871fc0dbfb');
my ($commands) = @_;
return '' if template::failing_conditional($commands);
join "\n", map retrieve($_), split /\s+/, $commands;
__e0624844a65ae41e0217dd871fc0dbfb

meta::vim_highlighter('cltex', <<'__10c051872325bda001b9653451009c65');
" Cleaner TeX
" Maintainer: Spencer Tipping <spencer@spencertipping.com>
" Language:   Cleaner TeX (a variant of LaTeX with support for a bunch of embedded languages)

if version < 600
  syntax clear
elseif exists("b:current_syntax")
  finish
endif

syn match   cltEofMarker  /<<\s*\w\+/ contained
syn match   cltLine       /^\s*- .*$/ contains=cltEofMarker

syn include @cpp          syntax/cpp.vim        | unlet b:current_syntax
syn include @java         syntax/java.vim       | unlet b:current_syntax
syn include @asm          syntax/asm.vim        | unlet b:current_syntax
syn include @javascript   syntax/javascript.vim | unlet b:current_syntax
syn include @html         syntax/html.vim       | unlet b:current_syntax

syn region  cltCpp        matchgroup=cltCode start=/^\s*- cpp .*<<\s*\z(\w\+\)$/        end=/^\s*- \z1$/ contains=@cpp
syn region  cltJava       matchgroup=cltCode start=/^\s*- java .*<<\s*\z(\w\+\)$/       end=/^\s*- \z1$/ contains=@java
syn region  cltAsm        matchgroup=cltCode start=/^\s*- asm .*<<\s*\z(\w\+\)$/        end=/^\s*- \z1$/ contains=@asm
syn region  cltJavascript matchgroup=cltCode start=/^\s*- javascript .*<<\s*\z(\w\+\)$/ end=/^\s*- \z1$/ contains=@javascript
syn region  cltHtml       matchgroup=cltCode start=/^\s*- html .*<<\s*\z(\w\+\)$/       end=/^\s*- \z1$/ contains=@html

syn region  cltResource   matchgroup=cltCode start=/^\s*- resource .*<<\s*\z(\w\+\)$/   end=/^\s*- \z1$/

syn cluster cltStuff      add=cltCpp,cltJava,cltAsm,cltJavascript,cltHtml,cltResource,cltVerbatim,cltLine

syn region  cltDocument   start=/\%^/ end=/\%$/ contains=@cltStuff

hi link cltLine           Special
hi link cltKeyword        String
hi link cltResource       String

hi link cltCode           Special
hi link cltDocument       Comment

let b:current_syntax = "cltex"
__10c051872325bda001b9653451009c65

meta::internal('runtime', <<'__487b99b3af6056d1d1c0e00dd4aef707');
my $initial_state        = state();
chomp(my $default_action = retrieve('data::default-action'));

my $function_name = shift(@ARGV) || $default_action || 'usage';
$function_name = 'usage' unless $externalized_functions{$function_name};

chomp(my $result = &$function_name(@ARGV));
print "$result\n" if $result;

END {
  save() unless $initial_state eq state();
}

__487b99b3af6056d1d1c0e00dd4aef707

__END__